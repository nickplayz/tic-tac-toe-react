{"version":3,"sources":["interfaces/enums/OccupantTypes.ts","interfaces/enums/ResultTypes.ts","components/Modal.tsx","components/SquareArea.tsx","App.tsx","utils/reportWebVitals.ts","index.tsx"],"names":["OccupantTypes","ResultTypes","Modal","message","cb","className","onClick","SquareArea","id","currentOccupant","isOccupied","showPlayerHover","onClickHandler","winningSequences","App","useState","undefined","previousResult","setResult","Array","currentBoard","changeCurrentBoard","selectedType","setType","getGameFreeSquares","useCallback","freeSquares","i","length","push","checkWin","plays","reduce","ac","v","concat","gameWon","entries","index","every","elem","indexOf","player","checkLoose","housePlayer","getDraw","useEffect","LOOSE","DRAW","WIN","updateBoardData","idx","updatedData","freeSpaces","Math","floor","random","map","_val","_arr","X","O","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f658089d.chunk.js","sourcesContent":["export enum OccupantTypes {\r\n    X = \"X\",\r\n    O = \"O\"\r\n}","export enum ResultTypes {\r\n    WIN = \"win\",\r\n    LOOSE = \"loose\",\r\n    DRAW = \"draw\"\r\n}","import { ModalInterface } from \"../interfaces/ModalInterface\";\r\n\r\nconst Modal = ({ message, cb }: ModalInterface) => (\r\n  <div className=\"flex flex-col absolute z-10 m-auto w-72 h-32 overflow-hidden rounded-md bg-white shadow-md\">\r\n    <div className=\"m-auto font-bold text-4xl text-gray-700\">{message}</div>\r\n    <button\r\n      onClick={() => cb()}\r\n      className=\"p-2 pointer bg-yellow-500 text-yellow-800\"\r\n    >\r\n      REMATCH\r\n    </button>\r\n  </div>\r\n);\r\n\r\nexport default Modal;\r\n","import { SquareAreaInterface } from \"../interfaces/SquareAreaInterface\";\r\n\r\nconst SquareArea = ({\r\n  id,\r\n  isOccupied,\r\n  currentOccupant,\r\n  showPlayerHover,\r\n  onClickHandler,\r\n}: SquareAreaInterface) => {\r\n  return (\r\n    <div\r\n      className={\r\n        id % 2 === 0\r\n          ? \"flex justify-center items-center w-1/3 h-1/3 bg-blue-600\"\r\n          : \"flex justify-center items-center w-1/3 h-1/3 bg-blue-700\"\r\n      }\r\n    >\r\n      <button\r\n        onClick={() => onClickHandler(id)}\r\n        className={\r\n          !currentOccupant\r\n            ? \"text-7xl text-white text-opacity-0 hover:text-opacity-50\"\r\n            : \"text-7xl text-white text-opacity-1\"\r\n        }\r\n      >\r\n        {!currentOccupant ? showPlayerHover : currentOccupant}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SquareArea;\r\n","import React from \"react\";\r\nimport { useCallback, useEffect, useState } from \"react\";\r\nimport Modal from \"./components/Modal\";\r\nimport SquareArea from \"./components/SquareArea\";\r\nimport { BoardDataInterface } from \"./interfaces/BoardDataInterface\";\r\nimport { OccupantTypes } from \"./interfaces/enums/OccupantTypes\";\r\nimport { ResultTypes } from \"./interfaces/enums/ResultTypes\";\r\n\r\nconst winningSequences: number[][] = [\r\n  [0, 1, 2],\r\n  [3, 4, 5],\r\n  [6, 7, 8],\r\n  [0, 3, 6],\r\n  [1, 4, 7],\r\n  [2, 5, 8],\r\n  [0, 4, 8],\r\n  [2, 4, 6],\r\n];\r\n\r\nfunction App() {\r\n  const [previousResult, setResult] = useState<ResultTypes | undefined>(\r\n    undefined\r\n  );\r\n  const [currentBoard, changeCurrentBoard] = useState<BoardDataInterface>([\r\n    ...Array(9),\r\n  ]);\r\n  const [selectedType, setType] = useState<OccupantTypes | undefined>(\r\n    undefined\r\n  );\r\n\r\n  const getGameFreeSquares = useCallback(() => {\r\n    const freeSquares = [];\r\n    for (let i = 0; i < currentBoard.length; i++) {\r\n      if (!currentBoard[i].currentOccupant) {\r\n        freeSquares.push(i);\r\n      }\r\n    }\r\n    return freeSquares;\r\n  }, [currentBoard]);\r\n\r\n  const checkWin = useCallback(() => {\r\n    if (!selectedType) return;\r\n    const plays = currentBoard.reduce((ac, v, i) => {\r\n      return v.currentOccupant === selectedType ? ac.concat(i) : ac;\r\n    }, []);\r\n    let gameWon = undefined;\r\n    for (let [index, win] of winningSequences.entries()) {\r\n      if (win.every((elem) => plays.indexOf(elem) > -1)) {\r\n        gameWon = {\r\n          index: index,\r\n          player: selectedType,\r\n        };\r\n        break;\r\n      }\r\n    }\r\n    return gameWon;\r\n  }, [currentBoard, selectedType]);\r\n\r\n  const checkLoose = useCallback(() => {\r\n    if (!selectedType) return;\r\n    const housePlayer = selectedType === \"O\" ? \"X\" : \"O\";\r\n    const plays = currentBoard.reduce((ac, v, i) => {\r\n      return v.currentOccupant === housePlayer ? ac.concat(i) : ac;\r\n    }, []);\r\n    let gameWon = undefined;\r\n    for (let [index, win] of winningSequences.entries()) {\r\n      if (win.every((elem) => plays.indexOf(elem) > -1)) {\r\n        gameWon = {\r\n          index: index,\r\n          player: selectedType,\r\n        };\r\n        break;\r\n      }\r\n    }\r\n    return gameWon;\r\n  }, [currentBoard, selectedType]);\r\n\r\n  const getDraw = useCallback(() => {\r\n    const freeSlots = getGameFreeSquares();\r\n    if (freeSlots.length === 0) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }, [getGameFreeSquares]);\r\n\r\n  useEffect(() => {\r\n    if (checkLoose()) {\r\n      setResult(ResultTypes.LOOSE);\r\n    }\r\n    if (getDraw()) {\r\n      setResult(ResultTypes.DRAW);\r\n    }\r\n    if (checkWin()) {\r\n      setResult(ResultTypes.WIN);\r\n    }\r\n  }, [checkWin, getDraw, checkLoose]);\r\n\r\n  const restartGame = () => {\r\n    setResult(undefined);\r\n    changeCurrentBoard([...Array(9)]);\r\n    setType(undefined);\r\n  };\r\n\r\n  const updateBoardData = (idx: number) => {\r\n    if (currentBoard[idx].isOccupied === true) return;\r\n\r\n    const updatedData = currentBoard;\r\n    updatedData[idx] = {\r\n      isOccupied: true,\r\n      currentOccupant: selectedType,\r\n    };\r\n\r\n    if (!checkWin()) {\r\n      const freeSpaces = getGameFreeSquares();\r\n      const cpuIndex = Math.floor(Math.random() * freeSpaces.length);\r\n      const cpuChoice = freeSpaces[cpuIndex];\r\n      updatedData[cpuChoice] = {\r\n        isOccupied: true,\r\n        currentOccupant: selectedType === \"O\" ? \"X\" : \"O\",\r\n      };\r\n    }\r\n\r\n    changeCurrentBoard([...updatedData]);\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex font-sans flex-col w-full items-center justify-center min-h-screen bg-grey-200 dark:bg-gray-900 p-5\">\r\n      <div id=\"board\" className=\"flex flex-wrap flex-row w-80 h-80 bg-blue-300\">\r\n        {currentBoard.map((_val: any, idx: number, _arr: any) => (\r\n          <SquareArea\r\n            key={`square-${idx}`}\r\n            id={idx}\r\n            isOccupied={currentBoard[idx].isOccupied}\r\n            currentOccupant={currentBoard[idx].currentOccupant}\r\n            showPlayerHover={selectedType}\r\n            onClickHandler={updateBoardData}\r\n          />\r\n        ))}\r\n      </div>\r\n      {!selectedType && (\r\n        <div className=\"flex flex-col m-10\">\r\n          <h1 className=\"text-xl font-bold\">SELECT YOUR TYPE</h1>\r\n          <span className=\"text-center\">\r\n            <button\r\n              className=\"w-10 h-10 rounded-md bg-black text-white\"\r\n              onClick={() => setType(OccupantTypes.X)}\r\n            >\r\n              X\r\n            </button>{\" \"}\r\n            or{\" \"}\r\n            <button\r\n              className=\"w-10 h-10 rounded-md bg-black text-white\"\r\n              onClick={() => setType(OccupantTypes.O)}\r\n            >\r\n              O\r\n            </button>\r\n          </span>\r\n        </div>\r\n      )}\r\n      {previousResult && (\r\n        <Modal message={`You ${previousResult}`} cb={restartGame} />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./styles/index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./utils/reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}